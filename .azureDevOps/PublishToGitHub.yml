trigger:
  - gh

pool:
  vmImage: windows-latest

steps:
  - task: PowerShell@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      targetType: "inline"
      script: |
        # Write your PowerShell commands here.
        Write-Host ' - - - - - - - - - - - - - - - - - - - - - - - - -'
        Write-Host ' reflect Azure Devops repo changes to GitHub repo'
        Write-Host ' - - - - - - - - - - - - - - - - - - - - - - - - - '
        git config --global user.email "martin@tweecore.de"
        git config --global user.name "Matthias Martin"
        $stageDir = '$(Build.SourcesDirectory)' | Split-Path
        $githubDir = $stageDir +"\"+"gitHub"
        #please provide your username
        $alias = 'TCMatthiasMartin:'+ "$(GithubPAT)"
        #Please make sure, you remove https from azure-repo-clone-url
        $sourceURL = 'https://$(AzurePAT)@dev.azure.com/tweecore/PIPipelineTest/_git/PIPipelineTest'
        #Check if the parent directory exists and delete
        if((Test-Path -path $githubDir))
        {
          Remove-Item -Path $githubDir -Recurse -force
        }
        if(!(Test-Path -path $githubDir))
        {
          New-Item -ItemType directory -Path $githubDir
          Set-Location $githubDir
          git clone $sourceURL 
          Set-Location .\PIPipelineTest
          ls
          git pull 
        }
        else
        {
          Write-Host "The given folder path $githubDir already exists";
        }
        $actualPath = Get-Location
        ls
        Set-Location "./app"
        $dirs = Get-ChildItem -Path "." -Recurse -Directory -Force -ErrorAction SilentlyContinue | Select-Object FullName;

        foreach($dir in $dirs)
        {
            $idRange = 50000;
            foreach($file in Get-ChildItem -Path $dir.FullName -filter "*.al")
            {
                $contentPath = $dir.FullName+"\$file";

                $newFileContent = Get-Content $contentPath |
                        Where-Object { -not $_.Contains('//***') -and -not $_.Contains('//TODO') };
                Set-Content -Path $contentPath -Value $newFileContent;

                $fileContent = Get-Content $contentPath;
                foreach($line in $fileContent)
                {
                    if(!$line.StartsWith("//") -and $line -ne "" -and !$line.StartsWith("#"))
                    {
                        $text = $line.Split(" ")[1];
                        $fileContent = $fileContent.Replace($text, $idRange);
                        break;
                    }
                }
                Set-Content -Path $contentPath -Value $fileContent
                $idRange += 1;
            }
        } 
        git stash
        git checkout -b gh
        git stash apply
        git add --all
        git commit -m "Build gh" 
        git push --force origin gh
    displayName: "CheckOut"

  - task: PowerShell@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/gh'))
    inputs:
      targetType: "inline"
      script: |
        # Write your PowerShell commands here.
        Write-Host ' - - - - - - - - - - - - - - - - - - - - - - - - -'
        Write-Host ' reflect Azure Devops repo changes to GitHub repo'
        Write-Host ' - - - - - - - - - - - - - - - - - - - - - - - - - '
        $stageDir = '$(Build.SourcesDirectory)' | Split-Path
        $githubDir = $stageDir +"\"+"gitHub"
        #please provide your username
        $alias = 'TCMatthiasMartin:'+ "$(GithubPAT)"

        $sourceURL = 'https://$(AzurePAT)@dev.azure.com/tweecore/PIPipelineTest/_git/PIPipelineTest'
        $destURL = 'https://' + $alias + '@github.com/TWEECORE/ProjectInvoice.git'
        $destination = $githubDir +"\"+"PIPipelineTest"

        #Check if the parent directory exists and delete
        if((Test-Path -path $githubDir))
        {
          Remove-Item -Path $githubDir -Recurse -force
        }
        if(!(Test-Path -path $githubDir))
        {
          New-Item -ItemType directory -Path $githubDir
          Set-Location $githubDir 
          git clone --single-branch --branch gh $sourceURL 
        }
        else
        {
          Write-Host "The given folder path $githubDir already exists";
        }
        Set-Location $destination
        Write-Output '*****Git removing remote secondary****'
        git remote rm secondary
        Write-Output '*****Git remote add****'
        git remote add --mirror=fetch secondary $destURL
        Write-Output '*****Git fetch origin****'
        git remote update
        git fetch --all
        Write-Output '*****Git push secondary****'
        git push --force secondary gh
        Write-Output '**Azure Devops repo synced with Github repo**'
        Set-Location $stageDir
        if((Test-Path -path $githubDir))
        {
         Remove-Item -Path $githubDir -Recurse -force
        }
    displayName: "Push"
